// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  //connecting our mongodb id to the id which we initializes
  id String @id @default(auto()) @map("_id") @db.ObjectId//id datatype primarykey generatingavalue mongodbmapping treatementasmongodbobjectId
  //@default(auto())  sets a default value for the field. auto() means Prisma will automatically generate a value if none is provided.
  //in monogodb the id is named _id hence we are mapping it using @map("_id")
  email String @unique
  username String @unique
  password String 
  avatar String? 
  createdAt DateTime @default(now())
  posts Post[]//one user may have many posts
  savedPost SavedPost[]// user can have multiple save posts

}

model Post {
  //now its time for posts 
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  price Int
  images String[]
  address String 
  city String 
  bedroom Int 
  bathroom Int
  latitude String 
  longitude String
  type Type
  property Property
  createdAt DateTime @default(now())
  //each post has a user 
  user User @relation(fields: [userId], references: [id])//giving user here and connecting both of em using ids of em
  userId String @db.ObjectId//connecting through id 
  postDetail PostDetail?//connecting with post
  savedPost SavedPost[]// post can have multiple save posts
}

//its used to restrict as we want role based entries 
enum Type {
  buy
  rent
}
enum Property {
  apartment 
  house
  condo 
  land
}
//now we are going to make the model for the details page of each posts
model PostDetail{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  desc String
  utilities String?
  pet String?
  income String?
  size Int?
  school Int?
  bus Int?
  restaurant Int?
  post Post @relation(fields: [postId], references: [id])//if a post is created then post detail is also created
  postId String @db.ObjectId @unique
}

//save post model
model SavedPost {
   id String @id @default(auto()) @map("_id") @db.ObjectId
   user User @relation(fields: [userId], references: [id])
   post Post @relation(fields: [postId], references: [id])
   userId String @db.ObjectId @unique
   postId String @db.ObjectId @unique
   createdAt DateTime @default(now())

   @@unique([userId, postId])  //we cannot create same save post for exactly the same user again and again
   
}

//always after modifying something in you schema run the command
//npx prisma db push